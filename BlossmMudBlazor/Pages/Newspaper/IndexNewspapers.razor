@using System.Net.Http.Json
@using BlossmAPI.Models;
@using BlossmMudBlazor.Dialogs
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@page "/Newspaper"

<MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Newspaper,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Newspaper</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="MudBlazor.Color.Success" OnClick="OppenAddDia"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.Autorenew" Color="MudBlazor.Color.Success" OnClick="OnInitializedAsync"></MudIconButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Thumnail</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Create Date</MudTh>
        <MudTh>Create By</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Sign">
                @{
                string url = "data:image/png;base64," + context.Thumnail;
            }
            <MudImage Width="50" Src="@url"></MudImage>
            </MudTd>
            <MudTd DataLabel="Sign">@context.Title</MudTd>
            <MudTd DataLabel="Sign">@context.CreateDate</MudTd>
            <MudTd DataLabel="Sign">
                @if(context.IdUserNavigation != null)
            {
                @context.IdUserNavigation.Email
            }
        </MudTd>
        <MudTd DataLabel="Sign">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => Delete(context.Id)"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="() => OppenDia(context)"></MudIconButton>
        </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Newspaper selectedItem1 = null;
    private HashSet<Newspaper> selectedItems = new HashSet<Newspaper>();

    private List<Newspaper> Elements = new List<Newspaper>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Newspaper>>("/api/Newspaper/GetNewspaper");
    }

    private bool FilterFunc1(Newspaper element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Newspaper element, string searchString)
    {

        return true;
    }

    async Task OppenAddDia()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<NewspaperAddDia>("Add Newspaper", options);
    }

    async void Delete(int id)
    {
        try
        {
            var options = new DialogOptions
                {
                    ClassBackground = "my-custom-class",
                    DisableBackdropClick = true
                };
            var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm", options);
            var rsDia = await dialog.Result;
            if ((bool)rsDia.Data == true)
            {
                var rs = await httpClient.DeleteAsync($"/api/Newspaper/DeleteNewspaper?id={id}");
                if (rs.IsSuccessStatusCode)
                {
                    Snackbar.Add("Successfully", Severity.Success);
                    await OnInitializedAsync();
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Error", Severity.Error);
                }
            }
        }
        catch
        {
            
        }
    }

    async void OppenDia(Newspaper newspaper)
    {
        try
        {
            var parameters = new DialogParameters<NewspaperDia>();
            parameters.Add(x => x.newspaper, newspaper);
            var options = new DialogOptions { CloseOnEscapeKey = true, FullScreen = true, MaxWidth = MaxWidth.Large, CloseButton = true };
            DialogService.Show<NewspaperDia>($"Newspaper", parameters, options);
        }
        catch
        {

        }
    }
}