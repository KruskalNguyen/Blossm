@page "/ChatSupport/{Id_Client}"
@using Blazored.LocalStorage;
@using BlossmMudBlazor.DTO;
@using BlossmMudBlazor.Helper;
@using Microsoft.AspNetCore.SignalR.Client

@inject ILocalStorageService localStorage
@inject HttpClient http;


<div id="unique_id_scroll_section" class="ma-0" style="height:620px;overflow: auto;">
    <MudPaper Elevation="0" Height="@listChat.Count().ToString()" Class="d-flex flex-column justify-space-between py-6">
        @foreach (var item in listChat)
        {
            if(item.Self)
            {
                <MudGrid>
                    <MudItem xs="6"></MudItem>
                    <MudItem xs="6"><MudChip Color="Color.Info">@item.Message</MudChip></MudItem>
                </MudGrid>
            }
            else
            {
                <MudGrid>
                    <MudItem xs="6"><MudChip Color="Color.Dark">@item.Message</MudChip></MudItem>
                    <MudItem xs="6"></MudItem>
                </MudGrid>
            }
            <br />
        }
        <MudScrollToTop TopOffset="100"
                        OnScroll="OnScroll"
                        Selector="#unique_id_scroll_section"
                        VisibleCssClass="visible absolute"
                        HiddenCssClass="invisible">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color">Go to top</MudButton>
        </MudScrollToTop>
    </MudPaper>
</div>
       
    
    <MudGrid>
        <MudItem xs="10">
            <MudTextField @bind-Value="TextChat" Label="Chat" Variant="Variant.Text"></MudTextField>
        </MudItem>
        <MudItem xs="2">
        <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Tertiary" OnClick="SendMess"></MudIconButton>
        </MudItem>
    </MudGrid>
    
    




@code {
    [Parameter]
    public string Id_Client { get; set; }

    string TextChat = null;

    List<HandleMessage> listChat = new List<HandleMessage>();

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
        var chats = await localStorage.GetItemAsync<List<HandleMessage>>(Id_Client);
        if (chats != null) listChat = chats;
        WebSocket.connection.On<Chat>("ChatSupport", async m =>
           {
               if (m.id_client.Equals(Id_Client))
               {
                   HandleMessage handleMessage = new HandleMessage();
                   handleMessage.Self = false;
                   handleMessage.Message = m.message;
                   listChat.Add(handleMessage);
                   StateHasChanged();
                   await localStorage.SetItemAsync(Id_Client, listChat);
               }
           });
    }

    Color Color = Color.Success;
    private void OnScroll(ScrollEventArgs e)
    {
        Color = (e.FirstChildBoundingClientRect.Top * -1) switch
        {
            var x when x < 500 => Color.Primary,
            var x when x < 1500 => Color.Secondary,
            var x when x < 2500 => Color.Tertiary,
            _ => Color.Error
        };
    }

    async Task SendMess()
    {
        if (TextChat != null)
        {
            HandleMessage handleMessage = new HandleMessage();
            handleMessage.Self = true;
            handleMessage.Message = TextChat;
            listChat.Add(handleMessage);
            StateHasChanged();
            
            await localStorage.SetItemAsync(Id_Client, listChat);

            Chat chat = new Chat();
            chat.id_client = WebSocket.idClient;
            chat.message = TextChat;
            chat.send_to = Id_Client;

            var rs = await http.PostAsJsonAsync("/api/websocket/chatsupport", chat);

            TextChat = null;
        }
    }
}
