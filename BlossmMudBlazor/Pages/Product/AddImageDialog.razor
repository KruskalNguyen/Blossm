@using BlossmAPI.Models;
@using BlossmAPI.ModelViews;


@{
	InitDialog();
}

<MudStack Style="width: 100%">
	<MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".png, .jpg" OnFilesChanged="OnFileUpload" AppendMultipleFiles Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
				   @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
		<ButtonTemplate>
			<MudPaper MinHeight="300px" Outlined="true" Class="@DragClass">
				<MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
				@foreach (var file in fileNames)
				{
					<MudChip Color="MudBlazor.Color.Dark" Text="@file" />
				}
				<br />
				@foreach (var img in imageDataUrls)
				{
					<MudImage Src="@img" Alt="img" Width="100" Height="100" Elevation="25" Class="rounded-lg pl-1 pr-1" />
				}
			</MudPaper>
		</ButtonTemplate>
	</MudFileUpload>
	<MudToolBar DisableGutters="true" Class="gap-4">
		<MudButton OnClick="Upload" Disabled="@(!fileNames.Any())" Color="MudBlazor.Color.Primary" Variant="Variant.Filled">Upload</MudButton>
		<MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="MudBlazor.Color.Error" Variant="Variant.Filled">Clear Images</MudButton>
	</MudToolBar>
</MudStack>

@code {
	[Parameter] public int id_variant { get; set; }

	[Inject] ISnackbar Snackbar { get; set; }
	[Inject] HttpClient httpClient { get; set; }
	[Inject] NavigationManager NavManager { get; set; }
	[Inject] IDialogService DialogService { get; set; }
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
	private string DragClass = DefaultDragClass;
	private List<string> fileNames = new List<string>();
	private List<string> imageDataUrls = new List<string>();
	private List<string> imgBase64 = new List<string>();
	private string imageDataUrl = "";
	private ImageVIew view = new ImageVIew();
	private HttpResponseMessage response = new HttpResponseMessage();

	private void InitDialog()
	{
		view.variant_id = id_variant;
	}
	private async Task Upload()
	{
		if (imgBase64.Count() == 0)
		{
			Snackbar.Add("There's no image to upload", MudBlazor.Severity.Success, config => { config.VisibleStateDuration = 5000; });
			return;
		}
		view.listimage = new List<string>();
		foreach(var img in imgBase64)
		{
			view.listimage.Add(img);
		}
		view.avatar = false;
		response = await httpClient.PostAsJsonAsync("api/Image/CreateImages", view);
		if(response.IsSuccessStatusCode)
		{
			Snackbar.Add("Add Images successfully", MudBlazor.Severity.Success, config => { config.VisibleStateDuration = 5000; });
			MudDialog.Close(DialogResult.Ok(view));
		}
		else
		{
			Snackbar.Add(await response.Content.ReadAsStringAsync(), MudBlazor.Severity.Error, config => { config.VisibleStateDuration = 5000; });
		}

	}
	async Task OnFileUpload(InputFileChangeEventArgs e)
	{
		ClearDragClass();
		var files = e.GetMultipleFiles();
		foreach (var file in files)
		{
			fileNames.Add(file.Name);
			//var resizedImage = await file.RequestImageFileAsync("image/png", 200, 200);
			var buffer = ConvertIBrowserFileToByteArray(file);
			string s = Convert.ToBase64String(await buffer);
			imageDataUrl = $"data:image/png;base64,{s}";
			imageDataUrls.Add(imageDataUrl);
			imgBase64.Add(s);
			//var rs = await resizedImage.OpenReadStream().ReadAsync(buffer);
		}
	}
	private async Task<byte[]> ConvertIBrowserFileToByteArray(IBrowserFile file)
	{
		using (var memoryStream = new MemoryStream())
		{
			await file.OpenReadStream().CopyToAsync(memoryStream);
			return memoryStream.ToArray();
		}
	}
	private void SetDragClass()
	{
		DragClass = $"{DefaultDragClass} mud-border-primary";
	}
	private void ClearDragClass()
	{
		DragClass = DefaultDragClass;
	}
	private async Task Clear()
	{
		fileNames.Clear();
		imageDataUrls.Clear();
		ClearDragClass();
		await Task.Delay(100);
	}
}
